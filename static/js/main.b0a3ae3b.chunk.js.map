{"version":3,"sources":["logo.svg","App.js","registerServiceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","counter","setCounter","_jsxs","className","children","_jsx","src","logo","alt","style","display","flexDirection","alignItems","justifyContent","fontSize","width","height","top","position","marginRight","backgroundColor","borderRadius","color","onClick","marginLeft","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4KAAe,MAA0B,iC,eCqG1BA,EA/EH,WAEV,IAAAC,EAA8BC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAAlCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAc1B,OACEI,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBF,eAAA,UAAQC,UAAU,aAAYC,SAAA,CAC5BC,cAAA,OAAKC,IAAKC,EAAMJ,UAAU,WAAWK,IAAI,SACzCH,cAAA,MAAIF,UAAU,YAAWC,SAAC,wBAE5BF,eAAA,OACEO,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,SAAU,OACVC,MAAO,OACPC,OAAQ,OACRC,IAAK,QACLb,SAAA,CACH,cAECC,cAAA,OACEI,MAAO,CACLK,SAAU,OACVI,SAAU,WACVD,IAAK,QACLb,SAEDJ,IAEHE,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEI,MAAO,CACLK,SAAU,MACVI,SAAU,WACVD,IAAK,OACLE,YAAa,MACbC,gBAAiB,QACjBC,aAAc,KACdC,MAAO,SAETC,QAlDW,WAEnBtB,EAAWD,EAAU,EACvB,EA+CgCI,SACvB,cAGDC,cAAA,UACEI,MAAO,CACLK,SAAU,MACVI,SAAU,WACVD,IAAK,OACLO,WAAY,MACZJ,gBAAiB,MACjBC,aAAc,KACdC,MAAO,SAETC,QA1DW,WAEnBtB,EAAWD,EAAU,EACvB,EAuDgCI,SACvB,sBAOX,ECzFMqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,sCAGlB,CACF,CACF,IACCC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,EAC7D,GACJ,CClEAC,IAASC,OAAO5C,cAACV,EAAG,IAAKuD,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,0CAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,0CAAsB,sBAElC5B,EAwCX,SAAiCO,GAE/ByB,MAAMzB,GACHI,MAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,QAClB,GACF,IAGAlC,EAAgBC,EAEpB,IACCc,OAAM,WACLF,QAAQC,IACN,gEAEJ,GACJ,CA5DQqB,CAAwBlC,GAHxBD,EAAgBC,EAKpB,GACF,CACF,CCpCAmC,E","file":"static/js/main.b0a3ae3b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <h1 className=\"App-title\">Welcome to React</h1>\n//         </header>\n//         <p className=\"App-intro\">\n//           To get started, edit <code>src/App.js</code> and save to reload.\n//         </p>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nconst App = () => {\n  //  Counter is a state initialized to 0\n  const [counter, setCounter] = useState(0);\n\n  // Function is called everytime increment button is clicked\n  const handleClick1 = () => {\n    // Counter state is incremented\n    setCounter(counter + 1);\n  };\n\n  // Function is called everytime decrement button is clicked\n  const handleClick2 = () => {\n    // Counter state is decremented\n    setCounter(counter - 1);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"App-title\">Welcome to React</h1>\n      </header>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          fontSize: \"300%\",\n          width: \"100%\",\n          height: \"100%\",\n          top: \"-15%\",\n        }}\n      >\n        Counter App\n        <div\n          style={{\n            fontSize: \"120%\",\n            position: \"relative\",\n            top: \"10vh\",\n          }}\n        >\n          {counter}\n        </div>\n        <div className=\"buttons\">\n          <button\n            style={{\n              fontSize: \"60%\",\n              position: \"relative\",\n              top: \"20vh\",\n              marginRight: \"5px\",\n              backgroundColor: \"green\",\n              borderRadius: \"8%\",\n              color: \"white\",\n            }}\n            onClick={handleClick1}\n          >\n            Increment\n          </button>\n          <button\n            style={{\n              fontSize: \"60%\",\n              position: \"relative\",\n              top: \"20vh\",\n              marginLeft: \"5px\",\n              backgroundColor: \"red\",\n              borderRadius: \"8%\",\n              color: \"white\",\n            }}\n            onClick={handleClick2}\n          >\n            Decrement\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}